{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\nafiu\\\\React Native\\\\Food\\\\src\\\\screens\\\\ResultsShowScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport yelp from \"../api/yelp\";\n\nvar ResultShowScreen = function ResultShowScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      result = _useState2[0],\n      setResult = _useState2[1];\n\n  var id = navigation.getParam('id');\n\n  var getResult = function getResult(id) {\n    var response;\n    return _regeneratorRuntime.async(function getResult$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(yelp.get(\"/\" + id));\n\n          case 2:\n            response = _context.sent;\n            setResult(response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getResult(id);\n  }, []);\n\n  if (!result) {\n    return null;\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, \"Description\"), React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"If you're looking for random paragraphs, you've come to the right place. When a random word or a random sentence isn't quite enough, the next logical step is to find a random paragraph. We created the Random Paragraph Generator with you in mind. The process is quite simple. Choose the number of random paragraphs you'd like to see and click the button. Your chosen number of paragraphs will instantly appear.\"), React.createElement(FlatList, {\n    horizontal: true,\n    data: result.photos,\n    keyExtractor: function keyExtractor(photo) {\n      return photo;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }\n      }, React.createElement(Image, {\n        style: styles.image,\n        source: {\n          uri: item\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  image: {\n    height: 200,\n    width: 200,\n    marginHorizontal: 15,\n    borderRadius: 4\n  },\n  title: {\n    borderRadius: 4,\n    paddingHorizontal: 5,\n    backgroundColor: 'rgb(224, 223, 220)',\n    marginHorizontal: 15,\n    marginBottom: 10,\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  text: {\n    marginHorizontal: 15,\n    marginBottom: 10\n  },\n  container: {\n    marginTop: 15\n  }\n});\nexport default ResultShowScreen;","map":{"version":3,"sources":["C:/Users/nafiu/React Native/Food/src/screens/ResultsShowScreen.js"],"names":["React","useState","useEffect","yelp","ResultShowScreen","navigation","result","setResult","id","getParam","getResult","get","response","data","styles","container","title","text","photos","photo","item","image","uri","StyleSheet","create","height","width","marginHorizontal","borderRadius","paddingHorizontal","backgroundColor","marginBottom","fontSize","fontWeight","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;AAEA,OAAOC,IAAP;;AAKA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAkB;AAAA,MAAfC,UAAe,QAAfA,UAAe;;AAAA,kBACXJ,QAAQ,CAAC,EAAD,CADG;AAAA;AAAA,MAChCK,MADgC;AAAA,MACxBC,SADwB;;AAEvC,MAAMC,EAAE,GAAEH,UAAU,CAACI,QAAX,CAAoB,IAApB,CAAV;;AAIA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOF,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACSL,IAAI,CAACQ,GAAL,OAAaH,EAAb,CADT;;AAAA;AACRI,YAAAA,QADQ;AAEdL,YAAAA,SAAS,CAACK,QAAQ,CAACC,IAAV,CAAT;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAKAX,EAAAA,SAAS,CAAC,YAAM;AACZQ,IAAAA,SAAS,CAACF,EAAD,CAAT;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAG,CAACF,MAAJ,EAAW;AACP,WAAO,IAAP;AACH;;AAGD,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEQ,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACG,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iaAFJ,EAUI,oBAAC,QAAD;AACI,IAAA,UAAU,MADd;AAEI,IAAA,IAAI,EAAEX,MAAM,CAACY,MAFjB;AAGI,IAAA,YAAY,EAAE,sBAAAC,KAAK;AAAA,aAAIA,KAAJ;AAAA,KAHvB;AAII,IAAA,UAAU,EAAE,2BAAY;AAAA,UAAVC,IAAU,SAAVA,IAAU;AACpB,aACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEN,MAAM,CAACO,KAArB;AAA4B,QAAA,MAAM,EAAE;AAACC,UAAAA,GAAG,EAAEF;AAAN,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADA;AAKH,KAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CADJ;AAyBH,CA7CD;;AA+CA,IAAMN,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,KAAK,EAAC;AACFI,IAAAA,MAAM,EAAE,GADN;AAEFC,IAAAA,KAAK,EAAE,GAFL;AAGFC,IAAAA,gBAAgB,EAAE,EAHhB;AAIFC,IAAAA,YAAY,EAAE;AAJZ,GADuB;AAO7BZ,EAAAA,KAAK,EAAC;AAEFY,IAAAA,YAAY,EAAE,CAFZ;AAGFC,IAAAA,iBAAiB,EAAC,CAHhB;AAIFC,IAAAA,eAAe,EAAE,oBAJf;AAKFH,IAAAA,gBAAgB,EAAE,EALhB;AAMFI,IAAAA,YAAY,EAAE,EANZ;AAOFC,IAAAA,QAAQ,EAAC,EAPP;AAQFC,IAAAA,UAAU,EAAE;AARV,GAPuB;AAiB7BhB,EAAAA,IAAI,EAAC;AAEDU,IAAAA,gBAAgB,EAAE,EAFjB;AAGDI,IAAAA,YAAY,EAAE;AAHb,GAjBwB;AAsB7BhB,EAAAA,SAAS,EAAC;AACNmB,IAAAA,SAAS,EAAE;AADL;AAtBmB,CAAlB,CAAf;AA2BA,eAAe9B,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {View, Text, StyleSheet, FlatList, Image} from 'react-native'\nimport yelp from '../api/yelp'\n\n\n\n\nconst ResultShowScreen = ({ navigation}) =>{\n    const [result, setResult] = useState([])\n    const id =navigation.getParam('id')\n    \n    \n    \n    const getResult = async (id) =>{\n        const response = await yelp.get(`/${id}`)\n        setResult(response.data)\n    }\n\n    useEffect(() => {\n        getResult(id)\n    }, [])\n\n    if(!result){\n        return null\n    }\n\n\n    return(\n        <View style={styles.container}>\n            <Text style={styles.title}>Description</Text>\n            <Text style={styles.text}>If you're looking for random paragraphs, \n            you've come to the right place. When a random word or a random sentence \n            isn't quite enough, the next logical step is to find a random paragraph. \n            We created the Random Paragraph Generator with you in mind. The process is quite simple. \n            Choose the number of random paragraphs you'd like to see and click the button. \n            Your chosen number of paragraphs will instantly appear.\n            </Text>\n\n            <FlatList\n                horizontal\n                data={result.photos}\n                keyExtractor={photo => photo}\n                renderItem={({item}) => {\n                    return(\n                    <View>\n                        <Image style={styles.image} source={{uri: item}}/>\n                    </View>\n                    ) \n                }}\n            />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    image:{\n        height: 200,\n        width: 200,\n        marginHorizontal: 15,\n        borderRadius: 4\n    },\n    title:{\n        //borderWidth: 2,\n        borderRadius: 4,\n        paddingHorizontal:5,\n        backgroundColor: 'rgb(224, 223, 220)',\n        marginHorizontal: 15,\n        marginBottom: 10,\n        fontSize:18,\n        fontWeight: 'bold'\n    },\n    text:{\n        //borderWidth: 2,\n        marginHorizontal: 15,\n        marginBottom: 10\n    },\n    container:{\n        marginTop: 15\n    }\n})\n\nexport default ResultShowScreen"]},"metadata":{},"sourceType":"module"}